{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Provisioning d'infrastructure cloud avec Terraform Le but du projet est de d\u00e9couvrir l'utilisation de Terraform pour le d\u00e9ploiement de ressources sous Azure. Notamment: un compte de stockage/storage account et un conteneur/blob container une web-app une VM Pour ce faire, d'autres ressources n\u00e9cessaires sont \u00e9galement d\u00e9ploy\u00e9es: groupe de ressources/resource group r\u00e9seau virtuel/vnet sous-r\u00e9seau/subnet interface r\u00e9seau/network interface groupe de s\u00e9curit\u00e9 r\u00e9seau/network security group plan app service/app service plan","title":"Accueil"},{"location":"#provisioning-dinfrastructure-cloud-avec-terraform","text":"Le but du projet est de d\u00e9couvrir l'utilisation de Terraform pour le d\u00e9ploiement de ressources sous Azure. Notamment: un compte de stockage/storage account et un conteneur/blob container une web-app une VM Pour ce faire, d'autres ressources n\u00e9cessaires sont \u00e9galement d\u00e9ploy\u00e9es: groupe de ressources/resource group r\u00e9seau virtuel/vnet sous-r\u00e9seau/subnet interface r\u00e9seau/network interface groupe de s\u00e9curit\u00e9 r\u00e9seau/network security group plan app service/app service plan","title":"Provisioning d'infrastructure cloud avec Terraform"},{"location":"A_vous_de_jouer/","text":"Pr\u00e9requis Installer Terraform en t\u00e9l\u00e9chargeant la version ad\u00e9quate \u00e0 l'adresse suivante: https://developer.hashicorp.com/terraform/install Il est possible qu'il faille ajouter Terraform dans les variables d'environnement Disposer d'un compte Azure Installer Azure CLI Disposer d'une bonne voire tr\u00e8s bonne connexion internet. Si par manque de d\u00e9bit le d\u00e9ploiement est trop long, il peut \u00e9chouer avec un message comme quoi l'h\u00f4te a ferm\u00e9 la connexion. Ex\u00e9cution Faire un git clone du projet. Compl\u00e9ter le fichier terraform_tfvars_fake avec vos propres donn\u00e9es (attention aux caract\u00e8res accept\u00e9s, diff\u00e9rents selon les ressources). Le renommer en terraform.tfvars. Se placer au niveau de la racine du projet (m\u00eame niveau que provider.tf ou que le main.tf principal) et ex\u00e9cuter dans un bash les commandes suivantes: az login Il se peut que vous rencontriez des difficult\u00e9s \u00e0 cette \u00e9tape. Il faut suivre les recommandations et recommencer avec les nouvelles commandes propos\u00e9es. Viennent ensuite les commandes Terraform \u00e0 suivre dans l'ordre. La commande destroy \u00e9tant, comme son nom l'indique, pour supprimer les ressources quand vous n'en avez plus besoin. terraform init terraform plan -var-file=\"terraform.tfvars\" terraform apply -var-file=\"terraform.tfvars\" A chaque \u00e9tape, suivre les indications et corriger les erreurs terraform destroy","title":"A vous de jouer"},{"location":"A_vous_de_jouer/#prerequis","text":"Installer Terraform en t\u00e9l\u00e9chargeant la version ad\u00e9quate \u00e0 l'adresse suivante: https://developer.hashicorp.com/terraform/install Il est possible qu'il faille ajouter Terraform dans les variables d'environnement Disposer d'un compte Azure Installer Azure CLI Disposer d'une bonne voire tr\u00e8s bonne connexion internet. Si par manque de d\u00e9bit le d\u00e9ploiement est trop long, il peut \u00e9chouer avec un message comme quoi l'h\u00f4te a ferm\u00e9 la connexion.","title":"Pr\u00e9requis"},{"location":"A_vous_de_jouer/#execution","text":"Faire un git clone du projet. Compl\u00e9ter le fichier terraform_tfvars_fake avec vos propres donn\u00e9es (attention aux caract\u00e8res accept\u00e9s, diff\u00e9rents selon les ressources). Le renommer en terraform.tfvars. Se placer au niveau de la racine du projet (m\u00eame niveau que provider.tf ou que le main.tf principal) et ex\u00e9cuter dans un bash les commandes suivantes: az login Il se peut que vous rencontriez des difficult\u00e9s \u00e0 cette \u00e9tape. Il faut suivre les recommandations et recommencer avec les nouvelles commandes propos\u00e9es. Viennent ensuite les commandes Terraform \u00e0 suivre dans l'ordre. La commande destroy \u00e9tant, comme son nom l'indique, pour supprimer les ressources quand vous n'en avez plus besoin. terraform init terraform plan -var-file=\"terraform.tfvars\" terraform apply -var-file=\"terraform.tfvars\" A chaque \u00e9tape, suivre les indications et corriger les erreurs terraform destroy","title":"Ex\u00e9cution"},{"location":"Projet/","text":"Structure du projet: . \u251c\u2500\u2500 docs/ | \u251c\u2500\u2500 A_vous_de_jouer.md | \u251c\u2500\u2500 index.md | \u2514\u2500\u2500 Projet.md \u251c\u2500\u2500 VersionAvancee/ | \u2514\u2500\u2500 modules/ | \u251c\u2500\u2500 nets/ | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 outputs.tf | \u2514\u2500\u2500 variables.tf | \u251c\u2500\u2500 resource_group/ | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 outputs.tf | \u2514\u2500\u2500 variables.tf | \u251c\u2500\u2500 storage/ | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 outputs.tf | \u2514\u2500\u2500 variables.tf | \u251c\u2500\u2500 vm/ | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 outputs.tf | \u2514\u2500\u2500variables.tf | \u2514\u2500\u2500 web_app/ | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 outputs.tf | \u2514\u2500\u2500 variables.tf | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 provider.tf | \u251c\u2500\u2500 terraform.tfvars | \u2514\u2500\u2500 variables.tf .gitignore mkdocs.yml Description: Les modules Le projet est structur\u00e9 avec des modules correspondant aux ressources \u00e0 cr\u00e9er. Chaque module comprend 3 fichiers .tf : main.tf le corps de code. C'est ici que les ressources sont d\u00e9finies. De la mani\u00e8re suivante: resource \"type de ressource\" \"nom de la ressource\"{ propri\u00e9t\u00e9 = \"param\u00e8tre\" propri\u00e9t\u00e9 = \"param\u00e8tre\" ... } On peut faire r\u00e9f\u00e9rence aux objets \u00e0 l'int\u00e9rieur du module ainsi: type_de_ressource.nom_de_la_ressource ou type_de_resource.nom_de_la_ressource.propri\u00e9t\u00e9. Exemple: resource \"azurerm_resource_group\" \"rg\" { name = var.resource_group_name location = var.location } On pourra appeler azurerm_resource_group.rg.name ailleurs dans le module. Pour faire y faire r\u00e9f\u00e9rence en dehors du module, il faut le d\u00e9clarer en output. outputs.tf . Le fichier outputs permet de centraliser les outputs du module. De la mani\u00e8re suivante: output \"nom par lequel l'objet sera appel\u00e9\"{ value = r\u00e9f\u00e9rence de l'objet } Exemple: output \"resource_group_name\" { value = azurerm_resource_group.rg } variables.tf . Le fichier variables.tf permet de centraliser les variables du module. De la mani\u00e8re suivante: variable \"nom par lequel la variable sera appel\u00e9e dans le module\" { description = \"texte qui sera affich\u00e9 pour renseigner la valeur\" type = le type de la variable default = \"la valeur par d\u00e9faut\" } Si la valeur par d\u00e9faut est renseign\u00e9e, le prompt n'affiche pas la description. La variable est appel\u00e9e dans le module \u00e0 l'aide de var.<nom de la variable> Exemple: variable \"resource_group_name\" { description = \"Le nom du groupe de ressources\" type = string default = \"rg\" } Le fichier main.tf principal C'est le corps du projet. Tous les modules sont appel\u00e9s \u00e0 cet endroit. De la mani\u00e8re suivante: module \"nom du module\"{ source = \"chemin du module\" propri\u00e9t\u00e9= \"param\u00e8tre\" propri\u00e9t\u00e9= \"param\u00e8tre\" ... } Toutes les propri\u00e9t\u00e9s de toutes les ressources du module doivent \u00eatre reprises en utilisant les d\u00e9signations des outputs. Les variables du main.tf principal proviennent du variables.tf principal. Ce qui signifie qu'il faut red\u00e9clarer toutes les variables des modules appel\u00e9s dans ce fichier. Des d\u00e9signations diff\u00e9rentes auraient permis une meilleure compr\u00e9hension d'un point de vue didactique mais j'ai pr\u00e9f\u00e9r\u00e9 garder les d\u00e9signations utilis\u00e9es dans les modules. Il est \u00e0 noter qu'il est possible de cr\u00e9er de nouvelles ressources dans ce main . Le fichier provider.tf Plusieurs possibilit\u00e9s s'offrent \u00e0 nous pour appeler le provider. Au niveau de la racine du projet, le provider sera le m\u00eame pour l'ensemble du projet. A l'int\u00e9rieur de chaque module, il sera ainsi possible d'avoir des providers diff\u00e9rents selon les modules Le fichier variables.tf principal Ce fichier permet de centraliser toutes les variables appel\u00e9es dans le main.tf principal. Le fichier terraform.tfvars Ce fichier est ignor\u00e9 par git. Il est donc int\u00e9ressant d'y mettre toutes les valeurs des variables sensibles. Il permet \u00e9galement de les centraliser et d'avoir un seul endroit pour les modifier.Les noms sont les d\u00e9signations du fichier variables.tf principal. Le fichier terraform_tfvars_fake ne sert qu'\u00e0 montrer \u00e0 quoi ressemble le fichier terraform.tfvars . Pour r\u00e9sumer: Si la variable est dans terraform.tfvars , c'est cette valeur qui est prise. Sinon, c'est la valeur par d\u00e9faut de variables.tf principal. S'il n'y a pas de valeur par d\u00e9faut dans variables.tf principal, c'est la valeur par d\u00e9faut de variables.tf du module qui est prise. S'il n'y a pas de valeur par d\u00e9faut dans variables.tf du module, le prompt affichera la description de la variable pour en saisir la valeur.","title":"Projet"},{"location":"Projet/#structure-du-projet","text":". \u251c\u2500\u2500 docs/ | \u251c\u2500\u2500 A_vous_de_jouer.md | \u251c\u2500\u2500 index.md | \u2514\u2500\u2500 Projet.md \u251c\u2500\u2500 VersionAvancee/ | \u2514\u2500\u2500 modules/ | \u251c\u2500\u2500 nets/ | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 outputs.tf | \u2514\u2500\u2500 variables.tf | \u251c\u2500\u2500 resource_group/ | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 outputs.tf | \u2514\u2500\u2500 variables.tf | \u251c\u2500\u2500 storage/ | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 outputs.tf | \u2514\u2500\u2500 variables.tf | \u251c\u2500\u2500 vm/ | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 outputs.tf | \u2514\u2500\u2500variables.tf | \u2514\u2500\u2500 web_app/ | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 outputs.tf | \u2514\u2500\u2500 variables.tf | \u251c\u2500\u2500 main.tf | \u251c\u2500\u2500 provider.tf | \u251c\u2500\u2500 terraform.tfvars | \u2514\u2500\u2500 variables.tf .gitignore mkdocs.yml","title":"Structure du projet:"},{"location":"Projet/#description","text":"","title":"Description:"},{"location":"Projet/#les-modules","text":"Le projet est structur\u00e9 avec des modules correspondant aux ressources \u00e0 cr\u00e9er. Chaque module comprend 3 fichiers .tf : main.tf le corps de code. C'est ici que les ressources sont d\u00e9finies. De la mani\u00e8re suivante: resource \"type de ressource\" \"nom de la ressource\"{ propri\u00e9t\u00e9 = \"param\u00e8tre\" propri\u00e9t\u00e9 = \"param\u00e8tre\" ... } On peut faire r\u00e9f\u00e9rence aux objets \u00e0 l'int\u00e9rieur du module ainsi: type_de_ressource.nom_de_la_ressource ou type_de_resource.nom_de_la_ressource.propri\u00e9t\u00e9. Exemple: resource \"azurerm_resource_group\" \"rg\" { name = var.resource_group_name location = var.location } On pourra appeler azurerm_resource_group.rg.name ailleurs dans le module. Pour faire y faire r\u00e9f\u00e9rence en dehors du module, il faut le d\u00e9clarer en output. outputs.tf . Le fichier outputs permet de centraliser les outputs du module. De la mani\u00e8re suivante: output \"nom par lequel l'objet sera appel\u00e9\"{ value = r\u00e9f\u00e9rence de l'objet } Exemple: output \"resource_group_name\" { value = azurerm_resource_group.rg } variables.tf . Le fichier variables.tf permet de centraliser les variables du module. De la mani\u00e8re suivante: variable \"nom par lequel la variable sera appel\u00e9e dans le module\" { description = \"texte qui sera affich\u00e9 pour renseigner la valeur\" type = le type de la variable default = \"la valeur par d\u00e9faut\" } Si la valeur par d\u00e9faut est renseign\u00e9e, le prompt n'affiche pas la description. La variable est appel\u00e9e dans le module \u00e0 l'aide de var.<nom de la variable> Exemple: variable \"resource_group_name\" { description = \"Le nom du groupe de ressources\" type = string default = \"rg\" }","title":"Les modules"},{"location":"Projet/#le-fichier-maintf-principal","text":"C'est le corps du projet. Tous les modules sont appel\u00e9s \u00e0 cet endroit. De la mani\u00e8re suivante: module \"nom du module\"{ source = \"chemin du module\" propri\u00e9t\u00e9= \"param\u00e8tre\" propri\u00e9t\u00e9= \"param\u00e8tre\" ... } Toutes les propri\u00e9t\u00e9s de toutes les ressources du module doivent \u00eatre reprises en utilisant les d\u00e9signations des outputs. Les variables du main.tf principal proviennent du variables.tf principal. Ce qui signifie qu'il faut red\u00e9clarer toutes les variables des modules appel\u00e9s dans ce fichier. Des d\u00e9signations diff\u00e9rentes auraient permis une meilleure compr\u00e9hension d'un point de vue didactique mais j'ai pr\u00e9f\u00e9r\u00e9 garder les d\u00e9signations utilis\u00e9es dans les modules. Il est \u00e0 noter qu'il est possible de cr\u00e9er de nouvelles ressources dans ce main .","title":"Le fichier main.tf principal"},{"location":"Projet/#le-fichier-providertf","text":"Plusieurs possibilit\u00e9s s'offrent \u00e0 nous pour appeler le provider. Au niveau de la racine du projet, le provider sera le m\u00eame pour l'ensemble du projet. A l'int\u00e9rieur de chaque module, il sera ainsi possible d'avoir des providers diff\u00e9rents selon les modules","title":"Le fichier provider.tf"},{"location":"Projet/#le-fichier-variablestf-principal","text":"Ce fichier permet de centraliser toutes les variables appel\u00e9es dans le main.tf principal.","title":"Le fichier variables.tf principal"},{"location":"Projet/#le-fichier-terraformtfvars","text":"Ce fichier est ignor\u00e9 par git. Il est donc int\u00e9ressant d'y mettre toutes les valeurs des variables sensibles. Il permet \u00e9galement de les centraliser et d'avoir un seul endroit pour les modifier.Les noms sont les d\u00e9signations du fichier variables.tf principal. Le fichier terraform_tfvars_fake ne sert qu'\u00e0 montrer \u00e0 quoi ressemble le fichier terraform.tfvars . Pour r\u00e9sumer: Si la variable est dans terraform.tfvars , c'est cette valeur qui est prise. Sinon, c'est la valeur par d\u00e9faut de variables.tf principal. S'il n'y a pas de valeur par d\u00e9faut dans variables.tf principal, c'est la valeur par d\u00e9faut de variables.tf du module qui est prise. S'il n'y a pas de valeur par d\u00e9faut dans variables.tf du module, le prompt affichera la description de la variable pour en saisir la valeur.","title":"Le fichier terraform.tfvars"}]}